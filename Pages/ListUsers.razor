@page "/users"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@attribute [Authorize]


<PageTitle>List Users</PageTitle>

<h1>Users</h1>

@if (users == null)
{
    @if (loadError == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <p class="text-danger">@loadError</p>
    }
}
else
{
    <div class="mb-3">
        <MudText Typo="Typo.h3">User</MudText>
    </div>

    <MudStack AlignItems="AlignItems.End" Class="mb-3">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
    </MudStack>

    <MudDataGrid T="UserModel" @ref="grid" ServerData="(new Func<GridState<UserModel>, Task<GridData<UserModel>>>(ServerReload))" Filterable="true">
        <Columns>
            <PropertyColumn Property="x => x!.Id" Title="Id" />
            <PropertyColumn Property="x => x!.UserName" Title="User Name" />
            <PropertyColumn Property="x => x!.FirstName" Title="First Name" />
            <PropertyColumn Property="x => x!.LastName" Title="Last Name" />
            <PropertyColumn Property="x => x!.IsActive" Title="Is Active" />
            <TemplateColumn StickyRight="true" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudStack Row="true">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" Title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="UserModel" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private MudDataGrid<UserModel>? grid;
    private string? loadError;

    private UserModel[]? users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await AppService.ListUsersAsync();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }

    private async Task<GridData<UserModel>> ServerReload(GridState<UserModel> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var RecordCount = 0;
        try
        {
            users = await AppService.ListUsersAsync();
            RecordCount = 0;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        return new() { TotalItems = RecordCount, Items = users?.ToList() ?? Enumerable.Empty<UserModel>() };
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddUser>("Add User", dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnEdit(UserModel record)
    {
        DialogParameters<UpdateUser> dialogParams = new() { { x => x.Id, record.Id } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateUser>("Update User", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnDelete(UserModel record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteUserAsync(record.Id!);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
}
